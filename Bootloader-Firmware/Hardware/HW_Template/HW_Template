######################################
# BUILD CONFIG
######################################

# BUILD NAME
BUILD_NAME = HW_Template


######################################
# MCU-RELATED CONFIG
######################################

# COMPILER DEFINE FOR MCU
MCU_DEFINE = STM32F103xB

# MCU CORE
MCU_CORE = cortex-m3

# MCU CORE ARTICHETURE
MCU_ARCH = armv7-m

# MCU FLOAT ABI (leave empty for no float ABI instruction ; "soft" softwate floating-point ; "softfp" hardware floating-point but software conversions ; "hard" hardware floating-point)
MCU_FPABI = soft

# NAME OF MCU LINKER SCRIPT FILE
MCU_LINKER = Hardware/$(BUILD_NAME)/Linker/STM32F103XB_FLASH.ld

# NAME OF MCU STARTUP FILE
MCU_STARTUP = startup_stm32f103xb.s

# SET TO 1 TO USE BIG ENDIAN
MCU_BIG_ENDIAN = 0


######################################
# APPLICATION CONFIG
######################################

include Config/AppConfig


######################################
# RTOS CONFIG
######################################

# RTOS SYSTEM FILE
RTOS_SYS_FILE = stm32f103xb.h

# RTOS IRQ FILE
RTOS_IRQ_FILE = irq_armv7m.s


######################################
# J-LINK CONFIG
######################################

# J-LINK CHIP NAME
JLINK_DEVICE = STM32F103C8

# J-LINK FLASH START ADDRESS (for .bin file)
JLINK_ADDR = 0x08000000


######################################
# HARDWARE-RELATED FILE LIST
######################################

# C++ TRANSLATION FILES
CPP_FILES += \

# C TRANSLATION FILES
C_FILES += \
Hardware/HW_Template/Src/system_stm32f1xx.c \
Hardware/HW_Template/Src/stm32f1xx_hal_gpio_ex.c \
Hardware/HW_Template/Src/stm32f1xx_hal_tim.c \
Hardware/HW_Template/Src/stm32f1xx_hal_tim_ex.c \
Hardware/HW_Template/Src/stm32f1xx_hal_uart.c \
Hardware/HW_Template/Src/stm32f1xx_hal.c \
Hardware/HW_Template/Src/stm32f1xx_hal_rcc.c \
Hardware/HW_Template/Src/stm32f1xx_hal_rcc_ex.c \
Hardware/HW_Template/Src/stm32f1xx_hal_gpio.c \
Hardware/HW_Template/Src/stm32f1xx_hal_dma.c \
Hardware/HW_Template/Src/stm32f1xx_hal_cortex.c \
Hardware/HW_Template/Src/stm32f1xx_hal_pwr.c \
Hardware/HW_Template/Src/stm32f1xx_hal_flash.c \
Hardware/HW_Template/Src/stm32f1xx_hal_flash_ex.c \
Hardware/HW_Template/Src/stm32f1xx_hal_exti.c \
Hardware/HW_Template/Src/stm32f1xx_hal_i2c.c \
Hardware/HW_Template/Src/stm32f1xx_it.c \

# ASSEMBLER TRANSLATION FILES
ASM_FILES += \
Hardware/HW_Template/Startup/$(MCU_STARTUP) \


######################################
# HARDWARE-RELATED INCLUDE PATHS
######################################

# INCLUDE DIRECTORIES
INCLUDE_PATHS += \
-IHardware/$(BUILD_NAME)/Inc


######################################
# HARDWARE-RELATED DEFINES
######################################

# DEFINES
DEFINES += \
-DHW_CONFIG=\"$(BUILD_NAME).hpp\" \


######################################
# RTOS STUFF
######################################

ifeq ($(APP_RTOS), 1)
CPP_FILES += \

C_FILES += \
RTOS/RTX/RTX_Config.c \
RTOS/RTX/os_systick.c \
RTOS/RTX/rtx_delay.c \
RTOS/RTX/rtx_evflags.c \
RTOS/RTX/rtx_evr.c \
RTOS/RTX/rtx_kernel.c \
RTOS/RTX/rtx_memory.c \
RTOS/RTX/rtx_mempool.c \
RTOS/RTX/rtx_msgqueue.c \
RTOS/RTX/rtx_mutex.c \
RTOS/RTX/rtx_semaphore.c \
RTOS/RTX/rtx_system.c \
RTOS/RTX/rtx_thread.c \
RTOS/RTX/rtx_timer.c \
RTOS/RTX/rtx_lib.c

ASM_FILES += \
RTOS/RTX/IRQ/$(RTOS_IRQ_FILE)

INCLUDE_PATHS += \
-IRTOS/RTX/Inc

DEFINES += \
-DCMSIS_device_header=\"$(RTOS_SYS_FILE)\"

endif


#######################################
# BUILD OPTIMIZATION
#######################################

# DEBUG BUILD
ifeq ($(DEBUG), 1)

# COMPILER FLAGS
OPT += -Og
COMPILER_FLAGS += -ggdb

ifeq ($(USE_G3), 1)
COMPILER_FLAGS += -g3
else
COMPILER_FLAGS += -g
endif

else

# SIZE OPTIMIZATION
ifeq ($(SIZE), 1)
OPT += -Os
else
OPT += -Ofast
endif
ifeq ($(FLTO), 1)
COMPILER_FLAGS += -flto
endif

endif


#######################################
# TOOLCHAIN
#######################################

# TOOLCHAIN PREFIX
TC_PREFIX = arm-none-eabi-

ifeq ($(GPP), 1)
CC = $(TC_PREFIX)g++
AS = $(TC_PREFIX)g++
else
CC = $(TC_PREFIX)gcc
AS = $(TC_PREFIX)gcc -x assembler-with-cpp
endif
CP = $(TC_PREFIX)objcopy
SZ = $(TC_PREFIX)size
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 

#######################################
# BUILD FLAGS
#######################################

CAL_FLAGS = -mcpu=$(MCU_CORE) -mtune=$(MCU_CORE) -march=$(MCU_ARCH) -mthumb $(FPU) -mfloat-abi=$(MCU_FPABI)

ifeq ($(MCU_BIG_ENDIAN), 1)
CAL_FLAGS += -mbig-endian
endif

COMPILER_FLAGS += $(CAL_FLAGS) $(DEFINES) $(INCLUDE_PATHS) $(OPT) -MMD -MP -MF"$(@:%.o=%.d)" -Wall -Wdouble-promotion -Wshadow -Wformat=2 -Wformat-overflow -Wformat-truncation -fdata-sections -ffunction-sections
LINKER_FLAGS = $(CAL_FLAGS) -specs=nano.specs -T$(MCU_LINKER) -lc -lm -lnosys -Wl,-Map=$(BUILD_FOLDER)/$(BUILD_NAME).map,--cref,--gc-sections,--print-memory-usage,--fuse-ld=gold

ifeq ($(GPP), 1)
ifeq ($(RTTI), 0)
COMPILER_FLAGS += -fno-rtti
endif
endif

ifeq ($(EXCEPTIONS), 0)
COMPILER_FLAGS += -fno-exceptions
endif

ifeq ($(DEF_LIB), 0)
COMPILER_FLAGS += -nodefaultlibs
endif

ifeq ($(STACK_ANALYSIS), 1)
COMPILER_FLAGS += -fstack-usage
endif

ifneq ($(STACK_OVERFLOW), 0)
COMPILER_FLAGS += -Wstack-usage=$(STACK_OVERFLOW)
endif


#######################################
# BUILD
#######################################

all: $(BUILD_FOLDER)/$(BUILD_NAME).elf $(BUILD_FOLDER)/$(BUILD_NAME).hex $(BUILD_FOLDER)/$(BUILD_NAME).bin

# LIST OF C OBJECTS
OBJECTS = $(addprefix $(BUILD_FOLDER)/,$(notdir $(C_FILES:.c=.o)))
vpath %.c $(sort $(dir $(C_FILES)))

# LIST OF C++ OBJECTS
OBJECTS_CPP = $(addprefix $(BUILD_FOLDER)/,$(notdir $(CPP_FILES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_FILES)))

# LIST OF ASM OBJECTS
OBJECTS += $(addprefix $(BUILD_FOLDER)/,$(notdir $(ASM_FILES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_FILES)))

$(BUILD_FOLDER)/%.o: %.c $(MAKEFILE) | $(BUILD_FOLDER) 
	$(CC) -c $(COMPILER_FLAGS) -Wa,-a,-ad,-alms=$(BUILD_FOLDER)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_FOLDER)/%.o: %.cpp $(MAKEFILE) | $(BUILD_FOLDER) 
	$(CC) -c $(COMPILER_FLAGS) -Wa,-a,-ad,-alms=$(BUILD_FOLDER)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_FOLDER)/%.o: %.s $(MAKEFILE) | $(BUILD_FOLDER)
	$(AS) -c $(COMPILER_FLAGS) $< -o $@

$(BUILD_FOLDER)/$(BUILD_NAME).elf: $(OBJECTS) $(OBJECTS_CPP) $(MAKEFILE)
	$(CC) $(OBJECTS) $(OBJECTS_CPP) $(LINKER_FLAGS) -o $@

$(BUILD_FOLDER)/%.hex: $(BUILD_FOLDER)/%.elf | $(BUILD_FOLDER)
	$(HEX) $< $@
	
$(BUILD_FOLDER)/%.bin: $(BUILD_FOLDER)/%.elf | $(BUILD_FOLDER)
	$(BIN) $< $@

ifeq ($(PRINT_VER), 1)
	$(CC) --version
endif
	
$(BUILD_FOLDER):
	mkdir $@


#######################################
# FLASH CHIP
#######################################

flash: all
	if not exist $(JLINK_FOLDER)/$(JLINK_FLASH) (echo Creating flash script & (echo r & echo h & echo loadbin $(BUILD_FOLDER)/$(BUILD_NAME).bin,$(JLINK_ADDR)& echo verifybin $(BUILD_FOLDER)/$(BUILD_NAME).bin,$(JLINK_ADDR) & echo r & echo q) > $(JLINK_FOLDER)/$(JLINK_FLASH)) else (echo Flash script exists) 
	JLink.exe -device $(JLINK_DEVICE) -if SWD -speed 4000 -autoconnect 1 -CommandFile $(JLINK_FOLDER)/$(JLINK_FLASH)
	

#######################################
# ERASE CHIP FLASH MEMORY
#######################################		

erase:
	if not exist $(JLINK_FOLDER)/$(JLINK_ERASE) (echo Creating erase script & (echo r & echo h & echo erase& echo r & echo q) > $(JLINK_FOLDER)/$(JLINK_ERASE)) else (echo Erase script exists)
	JLink.exe -device $(JLINK_DEVICE) -if SWD -speed 4000 -autoconnect 1 -CommandFile $(JLINK_FOLDER)/$(JLINK_ERASE)
	

#######################################
# REMOVE BUILD FOLDER & OTHER STUFF
#######################################

clean:
	if exist $(BUILD_FOLDER) (echo Deleting build directory & rmdir /s /q $(BUILD_FOLDER))
	if exist $(JLINK_FOLDER)/$(JLINK_FLASH) (echo Deleting flash script & del $(JLINK_FOLDER)\$(JLINK_FLASH))
	if exist $(JLINK_FOLDER)/$(JLINK_ERASE) (echo Deleting erase script & del $(JLINK_FOLDER)\$(JLINK_ERASE))


#######################################
# OPEN RTOS CONFIG FILE IN CMSIS CONFIG WIZARD
#######################################

rtos_cfg:
	java -jar $(CMSIS_WIZARD) $(APP_RTOS_CFG)

-include $(wildcard $(BUILD_FOLDER)/*.d)
